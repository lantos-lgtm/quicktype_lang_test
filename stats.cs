// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var stats = Stats.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Stats
    {
        [JsonProperty("read")]
        public DateTimeOffset Read { get; set; }

        [JsonProperty("preread")]
        public DateTimeOffset Preread { get; set; }

        [JsonProperty("pids_stats")]
        public PidsStats PidsStats { get; set; }

        [JsonProperty("blkio_stats")]
        public BlkioStats BlkioStats { get; set; }

        [JsonProperty("num_procs")]
        public long NumProcs { get; set; }

        [JsonProperty("storage_stats")]
        public StorageStats StorageStats { get; set; }

        [JsonProperty("cpu_stats")]
        public CpuStats CpuStats { get; set; }

        [JsonProperty("precpu_stats")]
        public PrecpuStats PrecpuStats { get; set; }

        [JsonProperty("memory_stats")]
        public MemoryStats MemoryStats { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("networks")]
        public Networks Networks { get; set; }
    }

    public partial class BlkioStats
    {
        [JsonProperty("io_service_bytes_recursive")]
        public IoServiceBytesRecursive[] IoServiceBytesRecursive { get; set; }

        [JsonProperty("io_serviced_recursive")]
        public object IoServicedRecursive { get; set; }

        [JsonProperty("io_queue_recursive")]
        public object IoQueueRecursive { get; set; }

        [JsonProperty("io_service_time_recursive")]
        public object IoServiceTimeRecursive { get; set; }

        [JsonProperty("io_wait_time_recursive")]
        public object IoWaitTimeRecursive { get; set; }

        [JsonProperty("io_merged_recursive")]
        public object IoMergedRecursive { get; set; }

        [JsonProperty("io_time_recursive")]
        public object IoTimeRecursive { get; set; }

        [JsonProperty("sectors_recursive")]
        public object SectorsRecursive { get; set; }
    }

    public partial class IoServiceBytesRecursive
    {
        [JsonProperty("major")]
        public long Major { get; set; }

        [JsonProperty("minor")]
        public long Minor { get; set; }

        [JsonProperty("op")]
        public string Op { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }
    }

    public partial class CpuStats
    {
        [JsonProperty("cpu_usage")]
        public CpuUsage CpuUsage { get; set; }

        [JsonProperty("system_cpu_usage")]
        public long SystemCpuUsage { get; set; }

        [JsonProperty("online_cpus")]
        public long OnlineCpus { get; set; }

        [JsonProperty("throttling_data")]
        public ThrottlingData ThrottlingData { get; set; }
    }

    public partial class CpuUsage
    {
        [JsonProperty("total_usage")]
        public long TotalUsage { get; set; }

        [JsonProperty("usage_in_kernelmode")]
        public long UsageInKernelmode { get; set; }

        [JsonProperty("usage_in_usermode")]
        public long UsageInUsermode { get; set; }
    }

    public partial class ThrottlingData
    {
        [JsonProperty("periods")]
        public long Periods { get; set; }

        [JsonProperty("throttled_periods")]
        public long ThrottledPeriods { get; set; }

        [JsonProperty("throttled_time")]
        public long ThrottledTime { get; set; }
    }

    public partial class MemoryStats
    {
        [JsonProperty("usage")]
        public long Usage { get; set; }

        [JsonProperty("stats")]
        public System.Collections.Generic.Dictionary<string, long> Stats { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }
    }

    public partial class Networks
    {
        [JsonProperty("eth0")]
        public Eth0 Eth0 { get; set; }
    }

    public partial class Eth0
    {
        [JsonProperty("rx_bytes")]
        public long RxBytes { get; set; }

        [JsonProperty("rx_packets")]
        public long RxPackets { get; set; }

        [JsonProperty("rx_errors")]
        public long RxErrors { get; set; }

        [JsonProperty("rx_dropped")]
        public long RxDropped { get; set; }

        [JsonProperty("tx_bytes")]
        public long TxBytes { get; set; }

        [JsonProperty("tx_packets")]
        public long TxPackets { get; set; }

        [JsonProperty("tx_errors")]
        public long TxErrors { get; set; }

        [JsonProperty("tx_dropped")]
        public long TxDropped { get; set; }
    }

    public partial class PidsStats
    {
        [JsonProperty("current")]
        public long Current { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }
    }

    public partial class PrecpuStats
    {
        [JsonProperty("cpu_usage")]
        public CpuUsage CpuUsage { get; set; }

        [JsonProperty("throttling_data")]
        public ThrottlingData ThrottlingData { get; set; }
    }

    public partial class StorageStats
    {
    }

    public partial class Stats
    {
        public static Stats FromJson(string json) => JsonConvert.DeserializeObject<Stats>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Stats self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
